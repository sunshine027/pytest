import os

from exception.testexception import TestException

class DataParser:

    def __init__(self):
        pass

    def md5sum(self, data):
        #for md5string in data.readlines():
            #md5 = md5string.split(' ')[0]
        md5 = data.split(' ')[0]
        return md5

# For decode output
    def vld_crc(self, file):
        if os.path.isfile(file):
            fd = open(file)
        else:
            return(0, 0)
        crcNV = ''
        crcYV = ''
        for line in fd:
            ost1 = line.find("CRC NV12=")
            if ost1 != -1:
                crcNV=line[ost1 + len("CRC NV12="):]
            ost2 = line.find("CRC YV12=")
            if ost2 != -1:
                crcYV=line[ost2 + len("CRC NV12="):]
        fd.close()
        if (0 == len(crcYV)) or (0 == len(crcNV)):
            return (0, 0)
        else:
            return (crcNV.rstrip(), crcYV.rstrip())

    def fps(self, file):
        if os.path.isfile(file):
            fd = open(file)
        else:
            return(0, 0)
        fps = '0'
        for line in fd:
            ost = line.find('fps')
            if ost != -1:
                al = line[:ost].split(":")
                try:
                    fps = al[2]
                except IndexError, e:
                    raise TestException("Error: there is something wrong during executing command, please run the command by yourself, and see what the problem is ")
                ol = len(fps)-4
                fps = fps[0:ol]
        fd.close()
        try:
            return float(fps.strip())
        except ValueError, e:
            raise TestException("Error: there is something wrong with the fps value generated by the command, it should be a number, but it isn't ")
 
#For testsuite encode output
    def psnr(self, file):
        if os.path.isfile(file):
            fd = open(file)
        else:
            return(0, 0)
        psnr = '0'
        for line in fd:
            ost1 = line.find("PSNR:")
            if ost1 != -1:
                ost2 = line.find("bytes") - 1
                psnr = line[ost1 + len("PSNR:"):ost2]
        fd.close()
        try:
            return float(psnr)
        except ValueError, e:
            raise TestException("Error: there is something wrong with the PSNR value generated by the command, it should be a number, but it isn't ")
